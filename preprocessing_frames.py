import os
import cv2
import numpy as np
import h5py
import cv2
import pandas as pd

                
def openface_h5_frame(frame_dir, landmark_path, h5_path, store_size=128):
    """
    Crop face from OpenFace landmarks and save a series of frames as .h5 file.

    frame_dir: directory containing frames from the video
    landmark_path: landmark .csv file generated by OpenFace.
    h5_path: the path to save the h5_file
    store_size: the cropped face is resized to 128 (default).
    """

    landmark = pd.read_csv(landmark_path)
    total_num_frame = len(landmark)
    frame_files = sorted([os.path.join(frame_dir, f) for f in os.listdir(frame_dir) if f.endswith('.jpeg')])

    with h5py.File(h5_path, 'w') as f:
        imgs = f.create_dataset('imgs', shape=(total_num_frame, store_size, store_size, 3), 
                                dtype='uint8', chunks=(1, store_size, store_size, 3),
                                compression="gzip", compression_opts=4)
        
        for frame_num, frame_file in enumerate(frame_files):
            if frame_num >= total_num_frame:
                break
            
            if landmark['success'][frame_num]:
                frame = cv2.imread(frame_file)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                lm_x = landmark[[f'x_{i}' for i in range(68)]].iloc[frame_num].values
                lm_y = landmark[[f'y_{i}' for i in range(68)]].iloc[frame_num].values

                minx, maxx = np.min(lm_x), np.max(lm_x)
                miny, maxy = np.min(lm_y), np.max(lm_y)
                y_range_ext = (maxy - miny) * 0.2
                miny = miny - y_range_ext

                cnt_x = np.round((minx + maxx) / 2).astype('int')
                cnt_y = np.round((maxy + miny) / 2).astype('int')

                bbox_size = np.round(1.5 * (maxy - miny)).astype('int')
                bbox_half_size = int(bbox_size / 2)

                face = np.take(frame, range(cnt_y - bbox_half_size, cnt_y + bbox_half_size), axis=0, mode='clip')
                face = np.take(face, range(cnt_x - bbox_half_size, cnt_x + bbox_half_size), axis=1, mode='clip')

                if store_size != bbox_size:
                    face = cv2.resize(face, (store_size, store_size))

                imgs[frame_num] = face

def main(landmark_dir, frame_base_dir, output_dir, store_size=128):
    """
    Processes all frame directories and landmark pairs in given directories and stores the results.
    Parameters:
        landmark_dir (str): Directory containing landmark files.
        frame_base_dir (str): Directory containing directories with extracted frames.
        output_dir (str): Directory to store output .h5 files.
        store_size (int, optional): Size to which faces are resized. Default is 128.
    """
    # Assumes landmark filenames are like '10.csv', matching frame directory names.
    for landmark_filename in os.listdir(landmark_dir):
        if landmark_filename.endswith('.csv'):
            subject_id = os.path.splitext(landmark_filename)[0]  # e.g., '10'
            print(subject_id)
            landmark_path = os.path.join(landmark_dir, landmark_filename)
            print(landmark_path)
            frame_dir = os.path.join(frame_base_dir, subject_id)
            print(frame_dir)
            h5_filename = f"{int(subject_id):02}.h5"  # Zero-pad subject ID
            h5_path = os.path.join(output_dir, h5_filename)
            
            if os.path.exists(frame_dir) and os.path.exists(landmark_path):
                print(f"Processing directory {subject_id}...")
                openface_h5_frame(frame_dir, landmark_path, h5_path, store_size)
            else:
                print(f"Missing files for directory {subject_id}, skipping...")

if __name__ == "__main__":
    # landmark_dir = '/data-fast/james/triage/datasets/church_processed/openface-processed'
    # landmark_dir = '/data-fast/james/triage/datasets/blue_orin_data/church-processed-train/openface_features'
    landmark_dir = '/data-fast/james/triage/datasets/blue_orin_data/church-processed-test/openface_features'
    frame_base_dir = '/data-fast/james/triage/datasets/blue_orin_data/church-processed-test/frame_data'
    output_dir = '/data-fast/james/triage/datasets/blue_orin_data/church-processed-test/test_h5'
    main(landmark_dir, frame_base_dir, output_dir)

