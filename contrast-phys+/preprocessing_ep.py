import os
import cv2
import numpy as np
import h5py
import cv2
import pandas as pd
import re
from tqdm import tqdm
                
def openface_h5_frame(frame_dir, landmark_path, h5_path, store_size=128):
    """
    Crop face from OpenFace landmarks and save a series of frames as .h5 file.

    frame_dir: directory containing frames from the video
    landmark_path: landmark .csv file generated by OpenFace.
    h5_path: the path to save the h5_file
    store_size: the cropped face is resized to 128 (default).
    """

    landmark = pd.read_csv(landmark_path)
    total_num_frame = len(landmark)
    frame_files = sorted([os.path.join(frame_dir, f) for f in os.listdir(frame_dir) if f.endswith('.jpeg')])

    # Load the ground truth PPG data from .npy file
    ppg_path = os.path.join(frame_dir, 'rgbd_ppg.npy')
    if os.path.exists(ppg_path):
        ppg_data = np.load(ppg_path)
    else:
        raise FileNotFoundError(f"No PPG file found in {frame_dir}")
    
    if len(ppg_data) != total_num_frame:
        raise ValueError(f"PPG data length ({len(ppg_data)}) does not match the number of frames ({total_num_frame}) in {frame_dir}")

    with h5py.File(h5_path, 'w') as f:
        imgs = f.create_dataset('imgs', shape=(total_num_frame, store_size, store_size, 3), 
                                dtype='uint8', chunks=(1, store_size, store_size, 3),
                                compression="gzip", compression_opts=4)
        
         # Create dataset for PPG waveforms
        bvp = f.create_dataset('bvp', data=ppg_data, dtype='float32', compression="gzip", compression_opts=4)

        for frame_num, frame_file in enumerate(frame_files):
            print(frame_num)
            print(frame_file)
            if frame_num >= total_num_frame:
                break
            
            if landmark['success'][frame_num]:
                print('HERE.')
                print(f'reading frame_file {frame_file}')
                frame = cv2.imread(frame_file)
                print(f'frame shape is {frame.shape}')
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                lm_x = landmark[[f'x_{i}' for i in range(68)]].iloc[frame_num].values
                lm_y = landmark[[f'y_{i}' for i in range(68)]].iloc[frame_num].values

                minx, maxx = np.min(lm_x), np.max(lm_x)
                miny, maxy = np.min(lm_y), np.max(lm_y)
                y_range_ext = (maxy - miny) * 0.2
                miny = miny - y_range_ext

                cnt_x = np.round((minx + maxx) / 2).astype('int')
                cnt_y = np.round((maxy + miny) / 2).astype('int')

                bbox_size = np.round(1.5 * (maxy - miny)).astype('int')
                bbox_half_size = int(bbox_size / 2)

                face = np.take(frame, range(cnt_y - bbox_half_size, cnt_y + bbox_half_size), axis=0, mode='clip')
                face = np.take(face, range(cnt_x - bbox_half_size, cnt_x + bbox_half_size), axis=1, mode='clip')
                print(f'face crop is done, now of shape {face.shape}')

                if store_size != bbox_size:
                    face = cv2.resize(face, (store_size, store_size))
                    print('face resize complete.')

                imgs[frame_num] = face

def process_frame_directory(frame_dir, h5_path, store_size=128):
    """
    Stack frames and PPG waveform data as .h5 file.

    frame_dir: directory containing frames from the video and the rgbd_ppg.npy file.
    h5_path: the path to save the h5_file
    store_size: the frames are resized to 128 (default).
    """

    # List all PNG images in the frame directory
    frame_files = sorted([os.path.join(frame_dir, f) for f in os.listdir(frame_dir) if f.endswith('.png')])

    # Load the ground truth PPG data from .npy file
    ppg_path = os.path.join(frame_dir, 'rgbd_ppg.npy')
    if os.path.exists(ppg_path):
        ppg_data = np.load(ppg_path)
    else:
        raise FileNotFoundError(f"No PPG file found in {frame_dir}")

    total_num_frame = len(frame_files)
    
    if len(ppg_data) != total_num_frame:
        raise ValueError(f"PPG data length ({len(ppg_data)}) does not match the number of frames ({total_num_frame}) in {frame_dir}")

    with h5py.File(h5_path, 'w') as f:
        # Create dataset for images
        imgs = f.create_dataset('imgs', shape=(total_num_frame, store_size, store_size, 3), 
                                dtype='uint8', chunks=(1, store_size, store_size, 3),
                                compression="gzip", compression_opts=4)
        
        # Create dataset for PPG waveforms
        bvp = f.create_dataset('bvp', data=ppg_data, dtype='float32', compression="gzip", compression_opts=4)

        # Process each image frame
        for frame_num, frame_file in tqdm(enumerate(frame_files), total=total_num_frame, desc=f'Processing {frame_dir}'):
            frame = cv2.imread(frame_file)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Resize to store size if necessary
            if frame.shape[:2] != (store_size, store_size):
                frame = cv2.resize(frame, (store_size, store_size))
                print("resizing")

            imgs[frame_num] = frame

def main(frame_base_dir, output_dir, store_size=128):
    """
    Processes all frame directories and landmark pairs in given directories and stores the results.
    Parameters:
        landmark_dir (str): Directory containing landmark files.
        frame_base_dir (str): Directory containing directories with extracted frames.
        output_dir (str): Directory to store output .h5 files.
        store_size (int, optional): Size to which faces are resized. Default is 128.
    """
     # Regular expression to capture directories like 'v_1_1', 'v_101_6', etc.
    # dir_pattern = re.compile(r'^v_\d+_\d+$')
    frame_dirs = [d for d in os.listdir(frame_base_dir) if os.path.isdir(os.path.join(frame_base_dir, d))]

    for frame_dir in tqdm(frame_dirs, desc="Processing frame directories"):
        full_frame_dir = os.path.join(frame_base_dir, frame_dir)
        h5_filename = f"{frame_dir}.h5"
        h5_path = os.path.join(output_dir, h5_filename)

        process_frame_directory(full_frame_dir, h5_path, store_size)

if __name__ == "__main__":
    # landmark_dir = '/data-fast/james/triage/datasets/church_processed/openface-processed'
    # landmark_dir = '/data-fast/james/triage/datasets/blue_orin_data/church-processed-train/openface_features'
    # landmark_dir = '/data-fast/james/triage/equipleth/Camera_77GHzRadar_Plethysmography/cphys/rgb_files/openface_features'
    frame_base_dir = '/data-fast/james/triage/equipleth/Camera_77GHzRadar_Plethysmography/cphys/rgb_files'
    output_dir = '/data-fast/james/triage/equipleth/Camera_77GHzRadar_Plethysmography/cphys/rgb_files_h5'
    # main(landmark_dir, frame_base_dir, output_dir)
    main(frame_base_dir, output_dir)

